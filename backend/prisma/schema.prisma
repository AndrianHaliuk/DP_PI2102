datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  passwordHash      String
  name              String?
  role              String          @default("user")
  donations         Donation[]
  campaignsCreated  Campaign[]      @relation("UserCampaigns")
  profile           UserProfile?
  bankAccounts      BankAccount[]
  feedbacks         Feedback[]      @relation("UserFeedbacks")
  createdAt         DateTime        @default(now())
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  avatarUrl String?
  bio       String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
}

model Campaign {
  id            Int        @id @default(autoincrement())
  title         String
  description   String
  imageUrl      String?
  goalAmount    Float
  currentAmount Float      @default(0)
  priority      Int        @default(0)
  createdBy     User?      @relation("UserCampaigns", fields: [createdById], references: [id])
  createdById   Int?
  createdAt     DateTime   @default(now())
  donations     Donation[]
}

model Donation {
  id           Int           @id @default(autoincrement())
  amount       Float
  isAnonymous  Boolean       @default(false)
  user         User?         @relation(fields: [userId], references: [id])
  userId       Int?
  campaign     Campaign      @relation(fields: [campaignId], references: [id])
  campaignId   Int
  transaction  Transaction?  // one-to-one
  createdAt    DateTime      @default(now())
}

model Transaction {
  id             Int           @id @default(autoincrement())
  donation       Donation      @relation(fields: [donationId], references: [id])
  donationId     Int           @unique       // ← обов’язково unique для one-to-one
  bankAccount    BankAccount   @relation(fields: [bankAccountId], references: [id])
  bankAccountId  Int
  providerTxId   String
  status         String        @default("pending")
  amount         Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model BankAccount {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  provider     String        // Stripe, Privat24 etc.
  accountId    String        // provider-specific id or token
  isDefault    Boolean       @default(false)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
}

model Feedback {
  id        Int      @id @default(autoincrement())
  user      User?    @relation("UserFeedbacks", fields: [userId], references: [id])
  userId    Int?
  message   String
  createdAt DateTime @default(now())
}
